datasource db {
  url      = env("DB_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum AccountEnum {
  REVIEWED
  ACCEPTED
  REJECTED
  DELETED
}

enum Roles {
  ADMIN
  NORMAL
}

enum ScannedStatus {
  SUCCESSFULL
  FAILED
  UNDERREVIEW
}

enum ScannedFailedStatus {
  DONE
  UNDERREVIEW
}

model Warehouses {
  id              Int           @id @default(autoincrement())
  areaname        String
  locations       Location      @relation(fields: [locid], references: [locid], onDelete: Cascade)
  locid           String        
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
}

model Location {
  id              Int             @id @default(autoincrement())
  locid           String          @unique @default(uuid())
  city            String      
  address         String
  assigneduser    User[]        
  Warehouses      Warehouses[]
  Auction         Auction[]
  Scanned         Scans[]
  failedScans     FailedScans[]
  scapper         ScraperZip[]
  locationItem    locationItemType[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
}

model User {
  id              String        @id @default(uuid())
  firstname       String   
  lastname        String
  email           String        @unique
  password        String
  account         AccountEnum   @default(REVIEWED)
  rejectedreason  String?
  location        Location?      @relation(fields:[locid], references: [locid])
  locid           String?        
  role            Roles         @default(NORMAL)
  scanProducts    Scans[]
  failedScans     FailedScans[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) 
}

model Products {
  id              Int         @id @default(autoincrement())
  productId       String      @unique @default(uuid())
  barcode         String      @unique
  lotNo           String
  quantity        Int         @default(1)
  images          String[]
  startingBid     Float
  title           String
  description     String
  category        String
  manufacturer    String
  consignor       Int?
  scans           Scans?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}

model Scans {
  id              Int                  @id @default(autoincrement())
  ScanId          String
  tag             String
  barcode         String               @unique
  products        Products             @relation(fields: [barcode], references: [barcode], onDelete: Cascade)
  auction         Auction              @relation(fields:[auctionId], references: [id])
  auctionId       String               
  locations       Location             @relation(fields:[locid], references: [locid])
  locid           String
  status          ScannedStatus        @default(UNDERREVIEW)
  failedStatus    ScannedFailedStatus?
  rejectedreason  String?
  scannedUser     User                 @relation(fields:[scannedBy], references: [id])
  scannedBy       String
  scannedName     String
  tagexpireAt     DateTime             
  createdAt       DateTime             @default(now())
}

model locationItemType {
  id              String               @id @default(uuid())
  itemtag         String
  locations       Location             @relation(fields:[locid], references: [locid], onDelete: Cascade)
  locid           String
  itemname         String        
  createdAt       DateTime             @default(now())
}

model ItemType {
  id              Int                   @id @default(autoincrement())
  uuid            String                @unique @default(uuid())
  name            String                @unique
  createdAt       DateTime              @default(now())
}

model ScraperZip {
  id                  Int                   @id @default(autoincrement())
  auction             Auction               @relation(fields:[auctionId], references: [id])
  auctionId           String
  locations           Location              @relation(fields:[locid], references: [locid])
  locid               String                
  filePath            String
  lastcsvgenerated    DateTime              @default(now())
  isNewUploaded       Boolean               @default(false)
  createdAt           DateTime              @default(now())
}

model Auction {
  id            String      @id @default(uuid())
  auctionType   AuctionType @default(Auction1)
  scannedItem   Scans[]
  failedScans   FailedScans[]
  locations     Location    @relation(fields:[locid], references: [locid], onDelete: Cascade)
  locid         String
  startDate     DateTime
  startTime     DateTime
  endDate       DateTime
  endTime       DateTime
  startNumber   Int?
  isRecover     DateTime? 
  srappers      ScraperZip[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) 
}

enum AuctionType {
  Auction1
  Auction2
}

model FailedScans {
  id              Int                  @id @default(autoincrement())
  FailedScanId    String
  tag             String
  barcode         String               @unique
  auction         Auction              @relation(fields:[auctionId], references: [id])
  auctionId       String               
  locations       Location             @relation(fields:[locid], references: [locid])
  locid           String
  failedStatus    ScannedFailedStatus? @default(DONE)
  rejectedReason  String?
  scannedUser     User                 @relation(fields:[scannedBy], references: [id])
  scannedBy       String
  scannedName     String
  markDone        Boolean
  tagexpireAt     DateTime             
  createdAt       DateTime             @default(now())
}
